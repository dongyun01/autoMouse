using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Runtime.InteropServices;//마우스 클릭 및 후킹 네임스페이스
using Utilities; // 키보드 후킹을 위한 네임스페이스 쓰기위해 dll 추가했음

namespace 오토마우스_ver1._0._0
{
    public partial class Form1 : Form
    {
        globalKeyboardHook gkh = new globalKeyboardHook();
        public Form1()
        {
            InitializeComponent();
            gkh.HookedKeys.Add(Keys.F9);
            gkh.HookedKeys.Add(Keys.F10);
            gkh.HookedKeys.Add(Keys.F11);
            gkh.HookedKeys.Add(Keys.F12);
            gkh.KeyDown += new KeyEventHandler(gkh_KeyDown);
        }
        [DllImport("user32.dll")]
        public static extern int GetCursorPos(ref POINTAPI lpPoint);
        public struct POINTAPI
        {
            public int x; public int y; // x축 y축
        }
        POINTAPI p = new POINTAPI();

        private void timer1_Tick(object sender, EventArgs e)
        {
            GetCursorPos(ref p); // 커서위치 받아옴
            label3.Text = p.x.ToString(); // x축 갱신
            label4.Text = p.y.ToString(); // y축 갱신
        }

        private void Form1_MouseMove(object sender, MouseEventArgs e)
        {
            // 100ms마다 포인터위치 갱신을 하기위한 타이머 설정  (label 3,4에 해당 값)  // ※다음 지정위치값 예외처리 생각할것
            timer1.Interval = 100;
            this.timer1.Tick += new EventHandler(timer1_Tick);
        }
        [DllImport("user32.dll")]
        static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo);
        private const uint LBUTTONDOWN = 0x0002;   // 왼쪽 마우스 눌린상태
        private const uint LBUTTONUP = 0x0004;   // 왼쪽 마우스 뗀상태

        

        private void timer2_Tick(object sender, EventArgs e)
        {
            // 타이머 - 마우스 좌측 클릭 ( 누름 뗌 )
            mouse_event(LBUTTONDOWN, 0, 0, 0, 0);
            mouse_event(LBUTTONUP, 0, 0, 0, 0);
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            // 트랙 바 스크롤을 움직이면 그 값만큼 텍스트 박스의 텍스트 값으로 들어감
            textBox3.Text = trackBar1.Value.ToString();
        }

        // gkh_KeyDown 생성 
        void gkh_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F9)
            { // 마우스 위치 받아오기
                textBox1.Text = MousePosition.X.ToString();
                textBox2.Text = MousePosition.Y.ToString();
            }
            if (e.KeyCode == Keys.F10)
            {
                if (textBox1.Text != "" || textBox2.Text != "")
                { // 받아왔던 위치로 이동 및 클릭
                    Cursor.Position = new Point(Int32.Parse(textBox1.Text), Int32.Parse(textBox2.Text));//지정위치로 이동
                    mouse_event(LBUTTONDOWN, 0, 0, 0, 0);//누름
                    mouse_event(LBUTTONUP, 0, 0, 0, 0);// 뗌
                }
            }
            if (e.KeyCode == Keys.F11)
            {
                if (textBox3.Text == "" || textBox3.Text == "0")
                { // delay 값
                    MessageBox.Show("Interval값을 입력해주셔야합니다.\n" +
                    "\"500이상 입력을 권장합니다.\"");
                }
                else
                { // 오토 클릭
                    timer2.Enabled = true;
                    timer2.Interval = Int32.Parse(textBox3.Text.ToString());
                    this.timer2.Tick += new EventHandler(timer2_Tick);
                }
            }
            if (e.KeyCode == Keys.F12)
            { // 오토 클릭 멈춤
                timer2.Enabled = false;
            }
        }

        private void 사용법UToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("F9 - x축,y축 지정\nF10 - 지정 x축," +
                " y축으로 이동 및 1회클릭\nF11 - 현재 커서위치 무한클릭\nF12 - 현재 커서위치 무한클릭 중지\n" +
                "Click Delay Value값은 필수이며 500이상을 권장합니다.\n" +
                "Click Delay Value란? 자동클릭 시 클릭 후 Delay만큼 멈췄다가 다시클릭합니다." +
                "  ( 입력값은 1000당 1초입니다. )\nTrack bar를 이용해 Delay 조절이 가능합니다.!\n★방향키,page up(down) 이용도 가능", "Help"
                , MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}
